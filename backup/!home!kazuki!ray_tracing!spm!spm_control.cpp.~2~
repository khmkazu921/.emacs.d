#include <iostream>
#include <math.h>
#include <healpix_cxx/healpix_base.h>

#define N_SIDE (16)
#define N_ANG 12*N_SIDE*N_SIDE
#define TINY (1.0e-31)
#define PRINT_ARRAY(array) for(size_t i=0; i<(int)sizeof(array); i++) cout << *array[i] << " "; cout << endl;

using namespace std;

Healpix_Base healpix(log2(N_SIDE),NEST);
struct angle_info {float xovr, yovr, zovr; short base_id; int group_id;};

int set_base_id(double cos_phi, double sin_phi, double tan_theta, double cos_pi_4) {
    double rev_cos_phi = 1.0e0/fabs(cos_phi); double rev_sin_phi = 1.0e0/fabs(sin_phi);
    if(fabs(cos_phi) >= cos_pi_4) {
        if(0.0e0 <= tan_theta && tan_theta <= rev_cos_phi)
            return 0;
        if(-rev_cos_phi <= tan_theta && tan_theta < 0.0e0)
            return 1;
        if(cos_phi >= 0.0e0)
            return 2;
        else return 3;
    } else {
        if(0.0e0 <= tan_theta && tan_theta <= rev_sin_phi)
            return 0;
        if(-rev_sin_phi <= tan_theta && tan_theta < 0.0e0)
            return 1;
        if(sin_phi >= 0.0e0)
            return 4;
        else
            return 5;
    }
}
void set_angle_info(struct angle_info* angle)
{
    double cos_pi_4 = cos(M_PI_4);
    
    for(int ipix=0; ipix<N_ANG ;ipix++){
        double cos_theta, cos_phi, sin_theta, sin_phi, tan_theta;
        double xovr, yovr, zovr;
        pointing h = healpix.pix2ang(ipix);
        h.phi += 0.6;
        cos_theta = cos(h.theta); sin_theta = sin(h.theta);
        cos_phi   = cos(h.phi)  ; sin_phi   = sin(h.phi);
        tan_theta = tan(h.theta);
        xovr = sin_theta * cos_phi;
        if(fabs(xovr)<TINY)  xovr = ((xovr >= 0.0e0) ? TINY : -TINY); 
        angle[ipix].xovr = xovr;
        yovr = sin_theta * sin_phi;
        if(fabs(yovr)<TINY)  yovr = ((yovr >= 0.0e0) ? TINY : -TINY); 
        angle[ipix].yovr = yovr;
        zovr = cos_theta;
        if(fabs(zovr)<TINY)  zovr = ((zovr >= 0.0e0) ? TINY : -TINY); 
        angle[ipix].zovr = zovr;
        angle[ipix].base_id = set_base_id(cos_phi, sin_phi, tan_theta, cos_pi_4);
        fix_arr<int,8> result;
        healpix.neighbors(ipix,result);
        PRINT_ARRAY(&result);
        if(ipix > 20) break;
        //num_all_base_id[angle[ipix].base_id]++;
    }
}
int main() {
    struct angle_info* angle = new angle_info[N_ANG];
    set_angle_info(angle);
    delete[] angle;
    return 0;
}
