



void quick_sort(int *arr, int low, int high)
{
    if (low < high) {
        int pi = partition(arr, low, high);
        quick_sort(arr, low, pi - 1);  // Before pi
        quick_sort(arr, pi + 1, high); // After pi
    }
}

int partition (int *arr, int low, int high)
{
    int pivot = arr[high];  
    int i = (low - 1);  // Index of smaller element
    for (int j = low; j <= high- 1; j++) {
        if (arr[j] < pivot) {
            i++;    // increment index of smaller element
            swap(arr, i, j);
        }
    }
    swap(arr, i+1, high);
    return (i + 1);
}

void swap (int *arr, int i, int j) {
    int tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

size_t array_unuque(int* array, size_t size)
{
    for (size_t i = 0; i < size - 1; ++i) 
        for (size_t j = i + 1; j < size; ++j) 
            if (array[i] == array[j]) {
                memmove(&array[j], &array[j + 1], sizeof(int) * (size - j - 1));
                --size; --j;
            }
    return size;
}
